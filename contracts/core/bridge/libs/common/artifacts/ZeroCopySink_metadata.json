{
	"compiler": {
		"version": "0.6.12+commit.27d51765"
	},
	"language": "Solidity",
	"output": {
		"abi": [],
		"devdoc": {
			"details": "Wrappers over encoding and serialization operation into bytes from bassic types in Solidity for PolyNetwork cross chain utility. Encode basic types in Solidity into bytes easily. It's designed to be used  for PolyNetwork cross chain application, and the encoding rules on Ethereum chain  and the decoding rules on other chains should be consistent. Here we   follow the underlying serialization rule with implementation found here:  https://github.com/polynetwork/poly/blob/master/common/zero_copy_sink.go Using this library instead of the unchecked serialization method can help reduce the risk of serious bugs and handfule, so it's recommended to use it. Please note that risk can be minimized, yet not eliminated.",
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"KSlashh/NFT/contracts/core/bridge/libs/common/ZeroCopySink.sol": "ZeroCopySink"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"KSlashh/NFT/contracts/core/bridge/libs/common/ZeroCopySink.sol": {
			"keccak256": "0x0c1a7abb404b4af8635cdb36156dded3c7a8ba4d8e51452b05586f58b6bee0bc",
			"license": "MIT",
			"urls": [
				"bzz-raw://27873b1ed15804b71374dcca36d0becddbd56bd6acc22bbb9271d128b6db9448",
				"dweb:/ipfs/QmXpd3Z5idgLp3cHKmKHUo4kmTLvGnNaKjZVztsbYC2MJc"
			]
		}
	},
	"version": 1
}